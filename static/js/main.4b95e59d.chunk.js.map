{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","data","columns","e","fileValue","document","querySelector","files","FormData","getElementById","append","reader","FileReader","fileToRead","onload","Uint8Array","target","result","workbook","XLSX","read","type","first_worksheet","Sheets","SheetNames","dataRender","utils","sheet_to_json","map","item","idx","key","ColumnsFinal","Object","keys","pop","a","i","title","dataIndex","this","setState","bind","readAsArrayBuffer","className","id","onDrop","acceptedFiles","handleFile","getRootProps","getInputProps","src","logo","alt","dataSource","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,kC,0TCmF5BC,G,yNAzEbC,MAAQ,CACNC,KAAM,KACNC,QAAS,M,0EAGAC,GACT,IAEMC,EAFOC,SAASC,cAAc,SAClBA,cAAc,SACTC,MAEN,IAAIC,SAASH,SAASI,eAAe,SAC7CC,OAAO,OAAQN,GAExB,IAAMO,EAAS,IAAIC,WAEbC,EAAaR,SAASC,cAAc,SAASC,MAAM,GAEzDI,EAAOG,OAAS,SAASX,GACvB,IAAIF,EAAO,IAAIc,WAAWZ,EAAEa,OAAOC,QAC/BC,EAAWC,IAAKC,KAAKnB,EAAM,CAACoB,KAAM,UAElCC,EAAkBJ,EAASK,OAAOL,EAASM,WAAW,IAGpDC,GAFNxB,EAAOkB,IAAKO,MAAMC,cAAcL,IAERM,KAAI,SAACC,EAAMC,GAAP,sBAAqBD,EAArB,CAA2BE,IAAKD,OAExDE,EAAeC,OAAOC,KAAKT,EAAW,IAC1CO,EAAaG,MAEb,IAAIjC,EAAU8B,EAAaJ,KAAI,SAACQ,EAAGC,EAAGL,GACpC,MAAO,CACLM,MAAON,EAAaK,GACpBE,UAAWP,EAAaK,GACxBN,IAAKM,MAITG,KAAKC,SAAS,CACZxC,KAAMwB,EACNvB,QAASA,KAEXwC,KAAKF,MAEP7B,EAAOgC,kBAAkB9B,K,+BAGlB,IAAD,SACoB2B,KAAKxC,MAAvBC,EADF,EACEA,KAAMC,EADR,EACQA,QAEd,OACE,yBAAK0C,UAAU,OACb,4BAAQA,UAAU,cAElB,0BAAMC,GAAG,QACP,kBAAC,IAAD,CAAUC,OAAQ,SAAAC,GAAa,OAAI,EAAKC,WAAWD,MAChD,gBAAEE,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,cAAhB,OACG,wBAASD,IACP,yCAAO5B,KAAK,OAAOwB,GAAG,QAAWK,MACjC,uNACA,yBAAKC,IAAKC,IAAMR,UAAU,WAAWS,IAAI,cAMnD,kBAAC,IAAD,CAAOC,WAAYrD,EAAMC,QAASA,U,GAnExBqD,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzD,SAASI,eAAe,SD6H3C,kBAAmBsD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4b95e59d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { Table } from 'antd';\nimport XLSX from 'xlsx';\nimport logo from './logo.svg';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\nclass App extends Component {\n\n  state = { \n    data: null,\n    columns: null\n  }\n\n  handleFile(e) {\n    const form = document.querySelector('#form');\n    const file = form.querySelector('#file');\n    const fileValue = file.files;\n\n    const formData = new FormData(document.getElementById(\"form\"));\n    formData.append('file', fileValue);\n\n    const reader = new FileReader();\n\n    const fileToRead = document.querySelector('#file').files[0];\n\n    reader.onload = function(e) {\n      let data = new Uint8Array(e.target.result);\n      let workbook = XLSX.read(data, {type: 'array'});\n\n      let first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      data = XLSX.utils.sheet_to_json(first_worksheet);\n\n      const dataRender = data.map((item, idx) => ({ ...item, key: idx }));\n\n      let ColumnsFinal = Object.keys(dataRender[0])\n      ColumnsFinal.pop()\n\n      let columns = ColumnsFinal.map((a, i, ColumnsFinal) => {\n        return { \n          title: ColumnsFinal[i],\n          dataIndex: ColumnsFinal[i],\n          key: i\n        }\n      })\n\n      this.setState({ \n        data: dataRender,\n        columns: columns\n      })\n    }.bind(this);\n\n    reader.readAsArrayBuffer(fileToRead);\n  }\n  \n  render(){\n    const { data, columns } = this.state\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n        <form id=\"form\">\n          <Dropzone onDrop={acceptedFiles => this.handleFile(acceptedFiles)}>\n            {({getRootProps, getInputProps}) => (\n                <div {...getRootProps()}>\n                  <input type=\"file\" id=\"file\" {...getInputProps()} />\n                  <p>Нажмите на Атом для загрузки xlsx файла</p>\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </div>\n            )}\n          </Dropzone>\n        </form> \n\n        <Table dataSource={data} columns={columns} />\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}